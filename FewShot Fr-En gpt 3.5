from datasets import load_dataset, load_from_disk
import pandas as pd
from sacrebleu import BLEU
import openai

openai.api_key = "apikey"

# Load the dataset
train_url = "https://storage.googleapis.com/kagglesdsdata/datasets/4484220/7685004/wmt14_translate_fr-en_validation.csv?X-Goog-Algorithm=GOOG4-RSA-SHA256&X-Goog-Credential=gcp-kaggle-com%40kaggle-161607.iam.gserviceaccount.com%2F20240504%2Fauto%2Fstorage%2Fgoog4_request&X-Goog-Date=20240504T012348Z&X-Goog-Expires=259200&X-Goog-SignedHeaders=host&X-Goog-Signature=327b652785029e139459eeea4e87722e48a44cc3e555f07ec9699936bfe80dabe3a8a5cbc7cbb571a12a42d4ea8d88a1455db9384d145873e924f874985e96ed3e12dc8d5288880836279671d5b42ea16b1b4b650c050df290438c2cb5a7debdc00e007490c820489f7b3f1cf673da5d87c34585b0dde9de49806d2e7dac5a565054863422d336609a932de08801eac3fa2798ef9773edfb9168c8415823f55e479852c893ccf77d2978a687c9160557128707ff1d2f8be3e292bf856ec435043da69444a9e64de2774506ba01b1466854c3bdcc9c56e6835af2bfa7d403b282e0579d830c7f3769da5e64b4a405873714b79d9eea648936c48a5b8b130bf8c9"
test_url = "https://storage.googleapis.com/kagglesdsdata/datasets/4484220/7685004/wmt14_translate_fr-en_test.csv?X-Goog-Algorithm=GOOG4-RSA-SHA256&X-Goog-Credential=gcp-kaggle-com%40kaggle-161607.iam.gserviceaccount.com%2F20240504%2Fauto%2Fstorage%2Fgoog4_request&X-Goog-Date=20240504T012419Z&X-Goog-Expires=259200&X-Goog-SignedHeaders=host&X-Goog-Signature=62d3c10bf19af63bc7d0d149a6728b798c199912608cd94cdef522a0d228a93900af9825cb03b63e90ad32d39f3e6aa4d1306448bf8b0f2bb6f56e05277518f6ff79847cdf649ea428a9d5dedb70c67462edd2de78f3f930228cd5764df2ffb10219ccf8d511c51ec1f5d87585bee1ce3b3e59602c17058d77daab8fe1fb70c8ca83dcbc8b2a2b56722644f2bfab79d67e5353a9ad8cb90c39e0dfa50a6f3bc3feb493c910efa0aebf0093eca38e865837a372a5a9295c04f69abebcf7308e4a7bccb936b506dce143f5dc86093fc74599db28b6d80621c8384f24bd05fb67665f19d7bbb6203d6708490689bc015633898800b89a0b0e7c5bfa38170626cd81"

# Download and read the CSV files
train_dataset = pd.read_csv(train_url)
test_dataset = pd.read_csv(test_url)

# Function to generate few-shot prompt
def generate_few_shot_prompt(train_examples, test_sentence):
    prompt = ""
    for index, row in train_examples.iterrows():
        prompt += f"French: {row['fr']}\nEnglish: {row['en']}\n\n"
    prompt += f"French: {test_sentence}\nEnglish:"
    return prompt

# Function to perform few-shot translation and calculate BLEU score
def few_shot_translation_and_bleu(num_shots):
    translations = []
    for index, row in test_dataset.iterrows():
        # Select few-shot examples
        few_shot_examples = train_dataset.sample(n=num_shots, random_state=42)
        prompt = generate_few_shot_prompt(few_shot_examples, row['fr'])

        response = openai.ChatCompletion.create(
            model="gpt-3.5-turbo",
            messages=[
                {"role": "system", "content": prompt},
            ],
            max_tokens=150,
            temperature=0.7,
            top_p=1,
            n=1,
        )
        translation = response.choices[0].message["content"].strip()
        translations.append(translation)

        # Save the translated text to a file
        with open(f"translations_{num_shots}_shots.txt", "a") as file:
            file.write(f"Original French: {row['fr']}\n")
            file.write(f"Translated English: {translation}\n\n")

    # Calculate BLEU score
    bleu = BLEU()
    references = [row['en'] for index, row in test_dataset.iterrows()]
    score = bleu.corpus_score(translations, [references])
    print(f"BLEU score for {num_shots} shots: {score.score}")

    # Writing BLEU score to a file
    with open(f"bleu_score_{num_shots}_shots.txt", "w") as file:
        file.write(f"BLEU score for {num_shots} shots: {score.score}")

# Perform few-shot translation and BLEU score calculation for different shot numbers
for num_shots in [5,10,50]:
    few_shot_translation_and_bleu(num_shots)
